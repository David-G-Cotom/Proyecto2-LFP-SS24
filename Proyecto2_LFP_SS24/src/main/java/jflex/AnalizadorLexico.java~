// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Proyecto2-LFP-SS24/Proyecto2_LFP_SS24/src/main/java/jflex/Lexer.flex


package jflex;

//importaciones


@SuppressWarnings("fallthrough")
public class AnalizadorLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\4\22\0\1\5\6\0"+
    "\1\6\2\7\2\10\1\7\1\11\1\12\1\10\12\13"+
    "\1\0\1\7\1\14\1\15\1\14\2\0\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\5\0"+
    "\1\47\1\0\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\12\0\1\3\252\0\2\26"+
    "\115\0\1\40\u01a8\0\2\3\u0100\0\1\30\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\5\1\6"+
    "\1\7\25\1\26\10\1\0\1\11\3\0\1\7\3\0"+
    "\1\12\3\0\1\12\23\0\1\13\14\0\3\10\1\12"+
    "\3\10\1\12\23\10\1\13\14\10\1\0\1\14\1\15"+
    "\1\0\1\13\1\16\43\0\1\10\1\13\1\16\43\10"+
    "\12\0\1\17\12\0\1\20\3\0\11\10\1\17\12\10"+
    "\1\20\3\10\15\0\14\10\7\0\6\10\3\0\2\10"+
    "\2\0\1\10\3\0\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\102\0\204\0\102\0\102\0\306"+
    "\0\u0108\0\u014a\0\u018c\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6"+
    "\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6"+
    "\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6"+
    "\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16"+
    "\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\102\0\u0ce4"+
    "\0\u0d26\0\u0d68\0\102\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\u0f36\0\102\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080"+
    "\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0"+
    "\0\u1902\0\u1944\0\u08c4\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e"+
    "\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e"+
    "\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae"+
    "\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be"+
    "\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u0d68\0\u224a\0\102"+
    "\0\102\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418"+
    "\0\u245a\0\u249c\0\u24de\0\u0e70\0\u2520\0\u2562\0\u25a4\0\u25e6"+
    "\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6"+
    "\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06"+
    "\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u08c4\0\u08c4\0\u2b92"+
    "\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2"+
    "\0\u2de4\0\u187e\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70"+
    "\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180"+
    "\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390"+
    "\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0"+
    "\0\u35e2\0\u3624\0\u3666\0\u36a8\0\102\0\u36ea\0\u372c\0\u376e"+
    "\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c\0\102"+
    "\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c"+
    "\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u08c4\0\u3c96\0\u3cd8\0\u3d1a"+
    "\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u08c4"+
    "\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\u40f8"+
    "\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6\0\u4308"+
    "\0\u434a\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518"+
    "\0\u455a\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728"+
    "\0\u476a\0\u47ac\0\u47ee\0\u4830\0\u4872\0\u48b4\0\u48f6\0\u4938"+
    "\0\u497a\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48"+
    "\0\u4b8a\0\u4bcc\0\u4c0e\0\u4c50\0\102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\2\3\1\5\1\6\1\7\1\10"+
    "\1\6\1\11\1\12\1\6\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\2\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\2\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\3\2\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\47\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\3\47\102\0\2\66\1\0\3\66"+
    "\1\67\4\66\1\70\66\66\5\0\1\71\106\0\1\72"+
    "\1\11\103\0\1\73\105\0\1\74\7\0\1\75\1\0"+
    "\1\76\4\0\1\77\2\0\1\100\7\0\1\74\7\0"+
    "\1\75\1\0\1\76\4\0\1\77\2\0\1\100\32\0"+
    "\1\101\5\0\1\102\11\0\1\103\11\0\1\101\5\0"+
    "\1\102\11\0\1\103\17\0\1\104\15\0\1\105\2\0"+
    "\1\106\10\0\1\104\15\0\1\105\2\0\1\106\26\0"+
    "\1\107\3\0\1\110\14\0\1\111\10\0\1\107\3\0"+
    "\1\110\14\0\1\111\55\0\1\112\31\0\1\112\20\0"+
    "\1\113\15\0\1\114\2\0\1\115\10\0\1\113\15\0"+
    "\1\114\2\0\1\115\47\0\1\116\31\0\1\116\33\0"+
    "\1\103\7\0\1\117\21\0\1\103\7\0\1\117\50\0"+
    "\1\120\31\0\1\120\35\0\1\121\31\0\1\121\53\0"+
    "\1\122\31\0\1\122\37\0\1\123\7\0\1\124\21\0"+
    "\1\123\7\0\1\124\55\0\1\125\5\0\1\126\23\0"+
    "\1\125\5\0\1\126\40\0\1\103\3\0\1\127\25\0"+
    "\1\103\3\0\1\127\47\0\1\130\31\0\1\130\32\0"+
    "\1\131\31\0\1\131\47\0\1\132\17\0\1\133\11\0"+
    "\1\132\17\0\1\133\23\0\1\134\3\0\1\135\14\0"+
    "\1\136\6\0\1\137\1\0\1\134\3\0\1\135\14\0"+
    "\1\136\6\0\1\137\34\0\1\140\1\0\1\141\27\0"+
    "\1\140\1\0\1\141\30\0\1\142\31\0\1\142\56\0"+
    "\1\143\31\0\1\143\35\0\1\47\5\0\1\74\7\0"+
    "\1\75\1\0\1\76\4\0\1\77\2\0\1\100\3\0"+
    "\4\47\1\144\7\47\1\145\1\47\1\146\4\47\1\147"+
    "\2\47\1\150\4\47\13\0\1\47\12\0\1\101\5\0"+
    "\1\102\11\0\1\103\11\47\1\151\5\47\1\152\11\47"+
    "\1\153\1\47\13\0\1\47\2\0\1\104\15\0\1\105"+
    "\2\0\1\106\7\0\1\47\1\154\15\47\1\155\2\47"+
    "\1\156\10\47\13\0\1\47\2\0\1\107\3\0\1\110"+
    "\14\0\1\111\7\0\1\47\1\157\3\47\1\160\14\47"+
    "\1\161\10\47\13\0\1\47\31\0\1\112\1\0\30\47"+
    "\1\162\2\47\13\0\1\47\2\0\1\113\15\0\1\114"+
    "\2\0\1\115\7\0\1\47\1\163\15\47\1\164\2\47"+
    "\1\165\10\47\13\0\1\47\23\0\1\116\7\0\22\47"+
    "\1\166\10\47\13\0\1\47\33\0\33\47\13\0\1\47"+
    "\7\0\1\103\7\0\1\117\13\0\6\47\1\153\7\47"+
    "\1\167\14\47\13\0\1\47\20\0\1\120\12\0\17\47"+
    "\1\170\13\47\13\0\1\47\6\0\1\121\24\0\5\47"+
    "\1\171\25\47\13\0\1\47\12\0\1\122\20\0\11\47"+
    "\1\172\21\47\13\0\1\47\2\0\1\123\7\0\1\124"+
    "\20\0\1\47\1\173\7\47\1\174\21\47\13\0\1\47"+
    "\20\0\1\125\5\0\1\126\4\0\17\47\1\175\5\47"+
    "\1\176\5\47\13\0\1\47\17\0\1\103\3\0\1\127"+
    "\7\0\16\47\1\153\3\47\1\177\10\47\13\0\1\47"+
    "\23\0\1\130\7\0\22\47\1\200\10\47\13\0\1\47"+
    "\6\0\1\131\24\0\5\47\1\201\25\47\13\0\1\47"+
    "\6\0\1\132\17\0\1\133\4\0\5\47\1\202\17\47"+
    "\1\203\5\47\13\0\1\47\2\0\1\134\3\0\1\135"+
    "\14\0\1\136\6\0\1\137\1\47\1\204\3\47\1\205"+
    "\14\47\1\206\6\47\1\207\1\47\13\0\1\47\17\0"+
    "\1\140\1\0\1\141\11\0\16\47\1\210\1\47\1\211"+
    "\12\47\13\0\1\47\2\0\1\142\30\0\1\47\1\212"+
    "\31\47\13\0\1\47\11\0\1\143\21\0\10\47\1\213"+
    "\22\47\2\66\1\0\3\66\1\67\75\66\1\0\3\66"+
    "\1\67\4\66\1\214\66\66\11\0\1\215\103\0\1\216"+
    "\107\0\1\103\31\0\1\103\67\0\1\217\31\0\1\217"+
    "\27\0\1\220\31\0\1\220\46\0\1\103\31\0\1\103"+
    "\53\0\1\221\31\0\1\221\47\0\1\222\31\0\1\222"+
    "\57\0\1\223\31\0\1\223\53\0\1\224\31\0\1\224"+
    "\40\0\1\225\1\0\1\226\6\0\1\227\20\0\1\225"+
    "\1\0\1\226\6\0\1\227\27\0\1\230\31\0\1\230"+
    "\66\0\1\231\31\0\1\231\26\0\1\232\10\0\1\233"+
    "\6\0\1\234\11\0\1\232\10\0\1\233\6\0\1\234"+
    "\43\0\1\235\31\0\1\235\41\0\1\236\31\0\1\236"+
    "\52\0\1\237\31\0\1\237\55\0\1\240\31\0\1\240"+
    "\44\0\1\241\31\0\1\241\47\0\1\242\31\0\1\242"+
    "\53\0\1\243\1\244\30\0\1\243\1\244\34\0\1\245"+
    "\31\0\1\245\67\0\1\103\31\0\1\103\33\0\1\246"+
    "\31\0\1\246\62\0\1\221\31\0\1\221\35\0\1\221"+
    "\31\0\1\221\55\0\1\220\31\0\1\220\37\0\1\247"+
    "\1\250\30\0\1\247\1\250\36\0\1\217\31\0\1\217"+
    "\54\0\1\251\31\0\1\251\44\0\1\252\31\0\1\252"+
    "\55\0\1\253\5\0\1\254\1\0\1\103\21\0\1\253"+
    "\5\0\1\254\1\0\1\103\40\0\1\221\31\0\1\221"+
    "\34\0\1\255\31\0\1\255\75\0\1\256\31\0\1\256"+
    "\44\0\1\257\31\0\1\257\42\0\1\260\31\0\1\260"+
    "\40\0\1\261\31\0\1\261\42\0\1\230\31\0\1\230"+
    "\57\0\1\262\5\0\1\263\23\0\1\262\5\0\1\263"+
    "\32\0\1\264\31\0\1\264\40\0\1\47\5\0\1\103"+
    "\25\0\4\47\1\153\26\47\13\0\1\47\25\0\1\217"+
    "\5\0\24\47\1\265\6\47\13\0\1\47\5\0\1\220"+
    "\25\0\4\47\1\266\26\47\13\0\1\47\4\0\1\103"+
    "\26\0\3\47\1\153\27\47\13\0\1\47\10\0\1\221"+
    "\22\0\7\47\1\267\23\47\13\0\1\47\10\0\1\222"+
    "\22\0\7\47\1\270\23\47\13\0\1\47\20\0\1\223"+
    "\12\0\17\47\1\271\13\47\13\0\1\47\24\0\1\224"+
    "\6\0\23\47\1\272\7\47\13\0\1\47\15\0\1\225"+
    "\1\0\1\226\6\0\1\227\4\0\14\47\1\273\1\47"+
    "\1\274\6\47\1\275\5\47\13\0\1\47\6\0\1\230"+
    "\24\0\5\47\1\276\25\47\13\0\1\47\25\0\1\231"+
    "\5\0\24\47\1\277\6\47\13\0\1\47\4\0\1\232"+
    "\10\0\1\233\6\0\1\234\6\0\3\47\1\300\10\47"+
    "\1\301\6\47\1\302\7\47\13\0\1\47\20\0\1\235"+
    "\12\0\17\47\1\303\13\47\13\0\1\47\12\0\1\236"+
    "\20\0\11\47\1\304\21\47\13\0\1\47\15\0\1\237"+
    "\15\0\14\47\1\305\16\47\13\0\1\47\23\0\1\240"+
    "\7\0\22\47\1\306\10\47\13\0\1\47\20\0\1\241"+
    "\12\0\17\47\1\307\13\47\13\0\1\47\20\0\1\242"+
    "\12\0\17\47\1\310\13\47\13\0\1\47\24\0\1\243"+
    "\1\244\5\0\23\47\1\311\1\312\6\47\13\0\1\47"+
    "\12\0\1\245\20\0\11\47\1\313\21\47\13\0\1\47"+
    "\32\0\1\103\31\47\1\153\1\47\13\0\1\47\16\0"+
    "\1\246\14\0\15\47\1\314\15\47\13\0\1\47\31\0"+
    "\1\221\1\0\30\47\1\267\2\47\13\0\1\47\17\0"+
    "\1\221\13\0\16\47\1\267\14\47\13\0\1\47\25\0"+
    "\1\220\5\0\24\47\1\266\6\47\13\0\1\47\15\0"+
    "\1\247\1\250\14\0\14\47\1\315\1\316\15\47\13\0"+
    "\1\47\5\0\1\217\25\0\4\47\1\265\26\47\13\0"+
    "\1\47\12\0\1\251\20\0\11\47\1\317\21\47\13\0"+
    "\1\47\7\0\1\252\23\0\6\47\1\320\24\47\13\0"+
    "\1\47\15\0\1\253\5\0\1\254\1\0\1\103\5\0"+
    "\14\47\1\321\5\47\1\322\1\47\1\153\6\47\13\0"+
    "\1\47\16\0\1\221\14\0\15\47\1\267\15\47\13\0"+
    "\1\47\3\0\1\255\27\0\2\47\1\323\30\47\13\0"+
    "\1\47\31\0\1\256\1\0\30\47\1\324\2\47\13\0"+
    "\1\47\26\0\1\257\4\0\25\47\1\325\5\47\13\0"+
    "\1\47\21\0\1\260\11\0\20\47\1\326\12\47\13\0"+
    "\1\47\12\0\1\261\20\0\11\47\1\327\21\47\13\0"+
    "\1\47\5\0\1\230\25\0\4\47\1\276\26\47\13\0"+
    "\1\47\15\0\1\262\5\0\1\263\7\0\14\47\1\330"+
    "\5\47\1\331\10\47\13\0\1\47\6\0\1\264\24\0"+
    "\5\47\1\332\25\47\2\66\1\0\3\66\1\67\4\66"+
    "\1\333\66\66\2\215\3\0\75\215\22\0\1\334\31\0"+
    "\1\334\53\0\1\335\31\0\1\335\52\0\1\336\31\0"+
    "\1\336\36\0\1\337\31\0\1\337\71\0\1\340\31\0"+
    "\1\340\45\0\1\341\31\0\1\341\42\0\1\342\31\0"+
    "\1\342\32\0\1\343\31\0\1\343\47\0\1\344\3\0"+
    "\1\345\25\0\1\344\3\0\1\345\53\0\1\346\31\0"+
    "\1\346\43\0\1\343\31\0\1\343\62\0\1\103\31\0"+
    "\1\103\52\0\1\347\31\0\1\347\47\0\1\257\31\0"+
    "\1\257\31\0\1\350\31\0\1\350\57\0\1\103\31\0"+
    "\1\103\57\0\1\235\31\0\1\235\27\0\1\351\31\0"+
    "\1\351\47\0\1\352\11\0\1\103\17\0\1\352\11\0"+
    "\1\103\46\0\1\103\31\0\1\103\42\0\1\347\31\0"+
    "\1\347\52\0\1\103\31\0\1\103\40\0\1\353\31\0"+
    "\1\353\57\0\1\354\31\0\1\354\37\0\1\355\31\0"+
    "\1\355\47\0\1\356\31\0\1\356\53\0\1\357\31\0"+
    "\1\357\52\0\1\260\31\0\1\260\57\0\1\345\31\0"+
    "\1\345\30\0\1\360\31\0\1\360\47\0\1\103\31\0"+
    "\1\103\63\0\1\361\31\0\1\361\53\0\1\362\31\0"+
    "\1\362\25\0\1\363\31\0\1\363\66\0\1\260\31\0"+
    "\1\260\23\0\1\47\6\0\1\334\24\0\5\47\1\364"+
    "\25\47\13\0\1\47\12\0\1\335\20\0\11\47\1\365"+
    "\21\47\13\0\1\47\15\0\1\336\15\0\14\47\1\366"+
    "\16\47\13\0\1\47\4\0\1\337\26\0\3\47\1\367"+
    "\27\47\13\0\1\47\26\0\1\340\4\0\25\47\1\370"+
    "\5\47\13\0\1\47\24\0\1\341\6\0\23\47\1\371"+
    "\7\47\13\0\1\47\17\0\1\342\13\0\16\47\1\372"+
    "\14\47\13\0\1\47\2\0\1\343\30\0\1\47\1\373"+
    "\31\47\13\0\1\47\2\0\1\344\3\0\1\345\24\0"+
    "\1\47\1\374\3\47\1\375\25\47\13\0\1\47\12\0"+
    "\1\346\20\0\11\47\1\376\21\47\13\0\1\47\6\0"+
    "\1\343\24\0\5\47\1\373\25\47\13\0\1\47\21\0"+
    "\1\103\11\0\20\47\1\153\12\47\13\0\1\47\24\0"+
    "\1\347\6\0\23\47\1\377\7\47\13\0\1\47\24\0"+
    "\1\257\6\0\23\47\1\325\7\47\13\0\1\47\6\0"+
    "\1\350\24\0\5\47\1\u0100\25\47\13\0\1\47\16\0"+
    "\1\103\14\0\15\47\1\153\15\47\13\0\1\47\26\0"+
    "\1\235\4\0\25\47\1\303\5\47\13\0\1\47\6\0"+
    "\1\351\24\0\5\47\1\u0101\25\47\13\0\1\47\6\0"+
    "\1\352\11\0\1\103\12\0\5\47\1\u0102\11\47\1\153"+
    "\13\47\13\0\1\47\17\0\1\103\13\0\16\47\1\153"+
    "\14\47\13\0\1\47\12\0\1\347\20\0\11\47\1\377"+
    "\21\47\13\0\1\47\15\0\1\103\15\0\14\47\1\153"+
    "\16\47\13\0\1\47\6\0\1\353\24\0\5\47\1\u0103"+
    "\25\47\13\0\1\47\16\0\1\354\14\0\15\47\1\u0104"+
    "\15\47\13\0\1\47\6\0\1\355\24\0\5\47\1\u0105"+
    "\25\47\13\0\1\47\6\0\1\356\24\0\5\47\1\u0106"+
    "\25\47\13\0\1\47\12\0\1\357\20\0\11\47\1\u0107"+
    "\21\47\13\0\1\47\15\0\1\260\15\0\14\47\1\326"+
    "\16\47\13\0\1\47\25\0\1\345\5\0\24\47\1\375"+
    "\6\47\13\0\1\47\6\0\1\360\24\0\5\47\1\u0108"+
    "\25\47\13\0\1\47\6\0\1\103\24\0\5\47\1\153"+
    "\25\47\13\0\1\47\22\0\1\361\10\0\21\47\1\u0109"+
    "\11\47\13\0\1\47\26\0\1\362\4\0\25\47\1\u010a"+
    "\5\47\13\0\1\47\4\0\1\363\26\0\3\47\1\u010b"+
    "\27\47\13\0\1\47\23\0\1\260\7\0\22\47\1\326"+
    "\10\47\2\66\1\0\3\66\1\67\4\66\1\u010c\66\66"+
    "\37\0\1\103\31\0\1\103\43\0\1\256\31\0\1\256"+
    "\36\0\1\u010d\31\0\1\u010d\43\0\1\u010e\31\0\1\u010e"+
    "\63\0\1\245\31\0\1\245\56\0\1\u010f\31\0\1\u010f"+
    "\47\0\1\221\31\0\1\221\47\0\1\260\31\0\1\260"+
    "\25\0\1\u0110\31\0\1\u0110\62\0\1\357\31\0\1\357"+
    "\56\0\1\103\31\0\1\103\34\0\1\u0111\31\0\1\u0111"+
    "\60\0\1\347\31\0\1\347\34\0\1\u0112\31\0\1\u0112"+
    "\62\0\1\u0113\31\0\1\u0113\26\0\1\u0114\31\0\1\u0114"+
    "\70\0\1\u0115\31\0\1\u0115\30\0\1\347\31\0\1\347"+
    "\45\0\1\u0116\31\0\1\u0116\73\0\1\260\31\0\1\260"+
    "\27\0\1\u0117\31\0\1\u0117\52\0\1\u0118\31\0\1\u0118"+
    "\35\0\1\47\23\0\1\103\7\0\22\47\1\153\10\47"+
    "\13\0\1\47\17\0\1\256\13\0\16\47\1\324\14\47"+
    "\13\0\1\47\6\0\1\u010d\24\0\5\47\1\u0119\25\47"+
    "\13\0\1\47\2\0\1\u010e\30\0\1\47\1\u011a\31\47"+
    "\13\0\1\47\16\0\1\245\14\0\15\47\1\313\15\47"+
    "\13\0\1\47\25\0\1\u010f\5\0\24\47\1\u011b\6\47"+
    "\13\0\1\47\25\0\1\221\5\0\24\47\1\267\6\47"+
    "\13\0\1\47\25\0\1\260\5\0\24\47\1\326\6\47"+
    "\13\0\1\47\3\0\1\u0110\27\0\2\47\1\u011c\30\47"+
    "\13\0\1\47\16\0\1\357\14\0\15\47\1\u0107\15\47"+
    "\13\0\1\47\25\0\1\103\5\0\24\47\1\153\6\47"+
    "\13\0\1\47\12\0\1\u0111\20\0\11\47\1\u011d\21\47"+
    "\13\0\1\47\23\0\1\347\7\0\22\47\1\377\10\47"+
    "\13\0\1\47\10\0\1\u0112\22\0\7\47\1\u011e\23\47"+
    "\13\0\1\47\23\0\1\u0113\7\0\22\47\1\u011f\10\47"+
    "\13\0\1\47\2\0\1\u0114\30\0\1\47\1\u0120\31\47"+
    "\13\0\1\47\23\0\1\u0115\7\0\22\47\1\u0121\10\47"+
    "\13\0\1\47\4\0\1\347\26\0\3\47\1\377\27\47"+
    "\13\0\1\47\2\0\1\u0116\30\0\1\47\1\u0122\31\47"+
    "\13\0\1\47\26\0\1\260\4\0\25\47\1\326\5\47"+
    "\13\0\1\47\6\0\1\u0117\24\0\5\47\1\u0123\25\47"+
    "\13\0\1\47\11\0\1\u0118\21\0\10\47\1\u0124\22\47"+
    "\2\66\1\0\3\66\1\67\2\66\1\u0125\70\66\16\0"+
    "\1\u0126\31\0\1\u0126\52\0\1\260\31\0\1\260\65\0"+
    "\1\u0127\31\0\1\u0127\26\0\1\u0128\31\0\1\u0128\55\0"+
    "\1\245\31\0\1\245\45\0\1\u0129\31\0\1\u0129\53\0"+
    "\1\u012a\31\0\1\u012a\60\0\1\121\31\0\1\121\32\0"+
    "\1\u012b\31\0\1\u012b\56\0\1\345\31\0\1\345\56\0"+
    "\1\103\31\0\1\103\25\0\1\u0129\31\0\1\u0129\44\0"+
    "\1\47\2\0\1\u0126\30\0\1\47\1\u012c\31\47\13\0"+
    "\1\47\5\0\1\260\25\0\4\47\1\326\26\47\13\0"+
    "\1\47\23\0\1\u0127\7\0\22\47\1\u012d\10\47\13\0"+
    "\1\47\2\0\1\u0128\30\0\1\47\1\u012e\31\47\13\0"+
    "\1\47\10\0\1\245\22\0\7\47\1\313\23\47\13\0"+
    "\1\47\6\0\1\u0129\24\0\5\47\1\u012f\25\47\13\0"+
    "\1\47\12\0\1\u012a\20\0\11\47\1\u0130\21\47\13\0"+
    "\1\47\23\0\1\121\7\0\22\47\1\171\10\47\13\0"+
    "\1\47\6\0\1\u012b\24\0\5\47\1\u0131\25\47\13\0"+
    "\1\47\15\0\1\345\15\0\14\47\1\375\16\47\13\0"+
    "\1\47\24\0\1\103\6\0\23\47\1\153\7\47\13\0"+
    "\1\47\2\0\1\u0129\30\0\1\47\1\u012f\31\47\2\66"+
    "\1\0\3\66\1\67\4\66\1\u0132\66\66\33\0\1\345"+
    "\31\0\1\345\32\0\1\u0133\31\0\1\u0133\71\0\1\260"+
    "\31\0\1\260\46\0\1\345\31\0\1\345\30\0\1\345"+
    "\31\0\1\345\62\0\1\u0134\31\0\1\u0134\27\0\1\47"+
    "\17\0\1\345\13\0\16\47\1\375\14\47\13\0\1\47"+
    "\2\0\1\u0133\30\0\1\47\1\u0135\31\47\13\0\1\47"+
    "\24\0\1\260\6\0\23\47\1\326\7\47\13\0\1\47"+
    "\23\0\1\345\7\0\22\47\1\375\10\47\13\0\1\47"+
    "\4\0\1\345\26\0\3\47\1\375\27\47\13\0\1\47"+
    "\17\0\1\u0134\13\0\16\47\1\u0136\14\47\2\66\1\0"+
    "\3\66\1\67\4\66\1\u0137\66\66\26\0\1\u0138\31\0"+
    "\1\u0138\41\0\1\362\31\0\1\362\42\0\1\47\12\0"+
    "\1\u0138\20\0\11\47\1\u0139\21\47\13\0\1\47\4\0"+
    "\1\362\26\0\3\47\1\u010a\27\47\2\66\1\0\3\66"+
    "\1\67\2\66\1\u013a\70\66\33\0\1\347\31\0\1\347"+
    "\27\0\1\47\17\0\1\347\13\0\16\47\1\377\14\47"+
    "\2\66\1\0\3\66\1\67\4\66\1\u013b\70\66\1\0"+
    "\3\66\1\67\4\66\1\u013c\70\66\1\0\3\66\1\u013d"+
    "\73\66";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19602];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\2\11\56\1\1\0\1\11\3\0"+
    "\1\11\3\0\1\1\3\0\1\11\23\0\1\1\14\0"+
    "\50\1\1\0\2\1\1\0\2\11\43\0\46\1\12\0"+
    "\1\11\12\0\1\11\3\0\30\1\15\0\14\1\7\0"+
    "\6\1\3\0\2\1\2\0\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public PintorPalabra pintor = new PintorPalabra();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
      yyline = 0;
    yycolumn = 0;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return new Token(TokenConstant.EOF, -1, -1, null);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Token(TokenConstant.ERROR, yyline, yycolumn, yytext());
            }
          // fall through
          case 18: break;
          case 2:
            { 
            }
          // fall through
          case 19: break;
          case 3:
            { System.out.print(yytext());
            }
          // fall through
          case 20: break;
          case 4:
            { return new Token(TokenConstant.SIGNO, yyline, yycolumn, yytext());
            }
          // fall through
          case 21: break;
          case 5:
            { return new Token(TokenConstant.ARITMETICO, yyline, yycolumn, yytext());
            }
          // fall through
          case 22: break;
          case 6:
            { pintor.pintarAzul((int)yychar, yylength()); return new Token(TokenConstant.ENTERO, yyline, yycolumn, yytext());
            }
          // fall through
          case 23: break;
          case 7:
            { return new Token(TokenConstant.RELACIONAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 24: break;
          case 8:
            { pintor.pintarFucsia((int)yychar, yylength()); return new Token(TokenConstant.ID, yyline, yycolumn, yytext());
            }
          // fall through
          case 25: break;
          case 9:
            { pintor.pintarVerde((int)yychar, yylength()); return new Token(TokenConstant.CADENA, yyline, yycolumn, yytext());
            }
          // fall through
          case 26: break;
          case 10:
            { pintor.pintarNaranja((int)yychar, yylength()); return new Token(TokenConstant.CREATE, yyline, yycolumn, yytext());
            }
          // fall through
          case 27: break;
          case 11:
            { pintor.pintarNaranja((int)yychar, yylength()); return new Token(TokenConstant.LOGICO, yyline, yycolumn, yytext());
            }
          // fall through
          case 28: break;
          case 12:
            { pintor.pintarGris((int)yychar, yylength()); return new Token(TokenConstant.COMENTARIO, yyline, yycolumn, yytext());
            }
          // fall through
          case 29: break;
          case 13:
            { pintor.pintarAzul((int)yychar, yylength()); return new Token(TokenConstant.DECIMAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 30: break;
          case 14:
            { pintor.pintarAzul((int)yychar, yylength()); return new Token(TokenConstant.FUNCION_AGREGACION, yyline, yycolumn, yytext());
            }
          // fall through
          case 31: break;
          case 15:
            { pintor.pintarMorado((int)yychar, yylength()); return new Token(TokenConstant.TIPO_DATO, yyline, yycolumn, yytext());
            }
          // fall through
          case 32: break;
          case 16:
            { pintor.pintarAzul((int)yychar, yylength()); return new Token(TokenConstant.BOOLEAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 33: break;
          case 17:
            { pintor.pintarAmarillo((int)yychar, yylength()); return new Token(TokenConstant.FECHA, yyline, yycolumn, yytext());
            }
          // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
