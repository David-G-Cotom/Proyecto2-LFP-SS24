// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Proyecto2-LFP-SS24/Proyecto2_LFP_SS24/src/main/java/jflex/Lexer.flex


package jflex;

//importaciones


@SuppressWarnings("fallthrough")
public class AnalizadorLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\4\6\0"+
    "\1\5\2\6\2\7\1\6\1\10\1\11\1\7\12\12"+
    "\1\0\1\6\1\13\1\14\1\13\2\0\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\5\0"+
    "\1\46\1\0\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\12\0\1\3\252\0\2\25"+
    "\115\0\1\37\u01a8\0\2\3\u0100\0\1\27\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\4\1\5\1\6"+
    "\25\1\26\7\1\0\1\10\3\0\1\6\3\0\1\11"+
    "\3\0\1\11\23\0\1\12\14\0\3\7\1\11\3\7"+
    "\1\11\23\7\1\12\14\7\1\0\1\13\1\14\1\0"+
    "\1\12\1\15\42\0\1\7\1\12\1\15\42\7\12\0"+
    "\1\16\11\0\1\17\3\0\11\7\1\16\11\7\1\17"+
    "\3\7\14\0\13\7\6\0\5\7\3\0\2\7\2\0"+
    "\1\7\3\0\1\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\101\0\202\0\101\0\101\0\303\0\u0104"+
    "\0\u0145\0\u0186\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c"+
    "\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514"+
    "\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924"+
    "\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c"+
    "\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0c71\0\u0cb2\0\u0cf3"+
    "\0\u0d34\0\101\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba"+
    "\0\u0efb\0\101\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081"+
    "\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289"+
    "\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699"+
    "\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1"+
    "\0\u18e2\0\u08a2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68"+
    "\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70"+
    "\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78"+
    "\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080"+
    "\0\u20c1\0\u2102\0\u2143\0\u2184\0\u0d34\0\u21c5\0\101\0\101"+
    "\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd"+
    "\0\u240e\0\u244f\0\u0e38\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594"+
    "\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c"+
    "\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4"+
    "\0\u29e5\0\u2a26\0\u2a67\0\u08a2\0\u08a2\0\u2aa8\0\u2ae9\0\u2b2a"+
    "\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u181f"+
    "\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9"+
    "\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101"+
    "\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309"+
    "\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511"+
    "\0\u3552\0\101\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8"+
    "\0\u3719\0\u375a\0\u379b\0\101\0\u37dc\0\u381d\0\u385e\0\u389f"+
    "\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7"+
    "\0\u08a2\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e"+
    "\0\u3caf\0\u3cf0\0\u08a2\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35"+
    "\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d"+
    "\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204\0\u4245"+
    "\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb\0\u440c\0\u444d"+
    "\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655"+
    "\0\u4696\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c\0\u485d"+
    "\0\u489e\0\u48df\0\u4920\0\u0c71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\5\1\10\1\11\1\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\2\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\2\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\3\2\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\46\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\3\46\101\0\2\65\2\0\1\65"+
    "\1\66\4\65\1\67\66\65\4\0\1\70\105\0\1\71"+
    "\1\10\102\0\1\72\104\0\1\73\7\0\1\74\1\0"+
    "\1\75\4\0\1\76\2\0\1\77\7\0\1\73\7\0"+
    "\1\74\1\0\1\75\4\0\1\76\2\0\1\77\31\0"+
    "\1\100\5\0\1\101\11\0\1\102\11\0\1\100\5\0"+
    "\1\101\11\0\1\102\16\0\1\103\15\0\1\104\2\0"+
    "\1\105\10\0\1\103\15\0\1\104\2\0\1\105\25\0"+
    "\1\106\3\0\1\107\14\0\1\110\10\0\1\106\3\0"+
    "\1\107\14\0\1\110\54\0\1\111\31\0\1\111\17\0"+
    "\1\112\15\0\1\113\2\0\1\114\10\0\1\112\15\0"+
    "\1\113\2\0\1\114\46\0\1\115\31\0\1\115\32\0"+
    "\1\102\7\0\1\116\21\0\1\102\7\0\1\116\47\0"+
    "\1\117\31\0\1\117\34\0\1\120\31\0\1\120\52\0"+
    "\1\121\31\0\1\121\36\0\1\122\7\0\1\123\21\0"+
    "\1\122\7\0\1\123\54\0\1\124\5\0\1\125\23\0"+
    "\1\124\5\0\1\125\37\0\1\102\3\0\1\126\25\0"+
    "\1\102\3\0\1\126\46\0\1\127\31\0\1\127\31\0"+
    "\1\130\31\0\1\130\46\0\1\131\17\0\1\132\11\0"+
    "\1\131\17\0\1\132\22\0\1\133\3\0\1\134\14\0"+
    "\1\135\6\0\1\136\1\0\1\133\3\0\1\134\14\0"+
    "\1\135\6\0\1\136\33\0\1\137\1\0\1\140\27\0"+
    "\1\137\1\0\1\140\27\0\1\141\31\0\1\141\55\0"+
    "\1\142\31\0\1\142\34\0\1\46\5\0\1\73\7\0"+
    "\1\74\1\0\1\75\4\0\1\76\2\0\1\77\3\0"+
    "\4\46\1\143\7\46\1\144\1\46\1\145\4\46\1\146"+
    "\2\46\1\147\4\46\12\0\1\46\12\0\1\100\5\0"+
    "\1\101\11\0\1\102\11\46\1\150\5\46\1\151\11\46"+
    "\1\152\1\46\12\0\1\46\2\0\1\103\15\0\1\104"+
    "\2\0\1\105\7\0\1\46\1\153\15\46\1\154\2\46"+
    "\1\155\10\46\12\0\1\46\2\0\1\106\3\0\1\107"+
    "\14\0\1\110\7\0\1\46\1\156\3\46\1\157\14\46"+
    "\1\160\10\46\12\0\1\46\31\0\1\111\1\0\30\46"+
    "\1\161\2\46\12\0\1\46\2\0\1\112\15\0\1\113"+
    "\2\0\1\114\7\0\1\46\1\162\15\46\1\163\2\46"+
    "\1\164\10\46\12\0\1\46\23\0\1\115\7\0\22\46"+
    "\1\165\10\46\12\0\1\46\33\0\33\46\12\0\1\46"+
    "\7\0\1\102\7\0\1\116\13\0\6\46\1\152\7\46"+
    "\1\166\14\46\12\0\1\46\20\0\1\117\12\0\17\46"+
    "\1\167\13\46\12\0\1\46\6\0\1\120\24\0\5\46"+
    "\1\170\25\46\12\0\1\46\12\0\1\121\20\0\11\46"+
    "\1\171\21\46\12\0\1\46\2\0\1\122\7\0\1\123"+
    "\20\0\1\46\1\172\7\46\1\173\21\46\12\0\1\46"+
    "\20\0\1\124\5\0\1\125\4\0\17\46\1\174\5\46"+
    "\1\175\5\46\12\0\1\46\17\0\1\102\3\0\1\126"+
    "\7\0\16\46\1\152\3\46\1\176\10\46\12\0\1\46"+
    "\23\0\1\127\7\0\22\46\1\177\10\46\12\0\1\46"+
    "\6\0\1\130\24\0\5\46\1\200\25\46\12\0\1\46"+
    "\6\0\1\131\17\0\1\132\4\0\5\46\1\201\17\46"+
    "\1\202\5\46\12\0\1\46\2\0\1\133\3\0\1\134"+
    "\14\0\1\135\6\0\1\136\1\46\1\203\3\46\1\204"+
    "\14\46\1\205\6\46\1\206\1\46\12\0\1\46\17\0"+
    "\1\137\1\0\1\140\11\0\16\46\1\207\1\46\1\210"+
    "\12\46\12\0\1\46\2\0\1\141\30\0\1\46\1\211"+
    "\31\46\12\0\1\46\11\0\1\142\21\0\10\46\1\212"+
    "\22\46\2\65\2\0\1\65\1\66\75\65\2\0\1\65"+
    "\1\66\4\65\1\213\66\65\10\0\1\214\102\0\1\215"+
    "\106\0\1\102\31\0\1\102\66\0\1\216\31\0\1\216"+
    "\26\0\1\217\31\0\1\217\45\0\1\102\31\0\1\102"+
    "\52\0\1\220\31\0\1\220\46\0\1\221\31\0\1\221"+
    "\56\0\1\222\31\0\1\222\52\0\1\223\31\0\1\223"+
    "\37\0\1\224\1\0\1\225\6\0\1\226\20\0\1\224"+
    "\1\0\1\225\6\0\1\226\26\0\1\227\31\0\1\227"+
    "\65\0\1\230\31\0\1\230\25\0\1\231\10\0\1\232"+
    "\6\0\1\233\11\0\1\231\10\0\1\232\6\0\1\233"+
    "\42\0\1\234\31\0\1\234\40\0\1\235\31\0\1\235"+
    "\51\0\1\236\31\0\1\236\54\0\1\237\31\0\1\237"+
    "\43\0\1\240\31\0\1\240\46\0\1\241\31\0\1\241"+
    "\52\0\1\242\1\243\30\0\1\242\1\243\33\0\1\244"+
    "\31\0\1\244\66\0\1\102\31\0\1\102\32\0\1\245"+
    "\31\0\1\245\61\0\1\220\31\0\1\220\34\0\1\220"+
    "\31\0\1\220\54\0\1\217\31\0\1\217\36\0\1\246"+
    "\31\0\1\246\36\0\1\216\31\0\1\216\53\0\1\247"+
    "\31\0\1\247\43\0\1\250\31\0\1\250\54\0\1\251"+
    "\5\0\1\252\1\0\1\102\21\0\1\251\5\0\1\252"+
    "\1\0\1\102\37\0\1\220\31\0\1\220\33\0\1\253"+
    "\31\0\1\253\74\0\1\254\31\0\1\254\43\0\1\255"+
    "\31\0\1\255\41\0\1\256\31\0\1\256\37\0\1\257"+
    "\31\0\1\257\41\0\1\227\31\0\1\227\56\0\1\260"+
    "\5\0\1\261\23\0\1\260\5\0\1\261\31\0\1\262"+
    "\31\0\1\262\37\0\1\46\5\0\1\102\25\0\4\46"+
    "\1\152\26\46\12\0\1\46\25\0\1\216\5\0\24\46"+
    "\1\263\6\46\12\0\1\46\5\0\1\217\25\0\4\46"+
    "\1\264\26\46\12\0\1\46\4\0\1\102\26\0\3\46"+
    "\1\152\27\46\12\0\1\46\10\0\1\220\22\0\7\46"+
    "\1\265\23\46\12\0\1\46\10\0\1\221\22\0\7\46"+
    "\1\266\23\46\12\0\1\46\20\0\1\222\12\0\17\46"+
    "\1\267\13\46\12\0\1\46\24\0\1\223\6\0\23\46"+
    "\1\270\7\46\12\0\1\46\15\0\1\224\1\0\1\225"+
    "\6\0\1\226\4\0\14\46\1\271\1\46\1\272\6\46"+
    "\1\273\5\46\12\0\1\46\6\0\1\227\24\0\5\46"+
    "\1\274\25\46\12\0\1\46\25\0\1\230\5\0\24\46"+
    "\1\275\6\46\12\0\1\46\4\0\1\231\10\0\1\232"+
    "\6\0\1\233\6\0\3\46\1\276\10\46\1\277\6\46"+
    "\1\300\7\46\12\0\1\46\20\0\1\234\12\0\17\46"+
    "\1\301\13\46\12\0\1\46\12\0\1\235\20\0\11\46"+
    "\1\302\21\46\12\0\1\46\15\0\1\236\15\0\14\46"+
    "\1\303\16\46\12\0\1\46\23\0\1\237\7\0\22\46"+
    "\1\304\10\46\12\0\1\46\20\0\1\240\12\0\17\46"+
    "\1\305\13\46\12\0\1\46\20\0\1\241\12\0\17\46"+
    "\1\306\13\46\12\0\1\46\24\0\1\242\1\243\5\0"+
    "\23\46\1\307\1\310\6\46\12\0\1\46\12\0\1\244"+
    "\20\0\11\46\1\311\21\46\12\0\1\46\32\0\1\102"+
    "\31\46\1\152\1\46\12\0\1\46\16\0\1\245\14\0"+
    "\15\46\1\312\15\46\12\0\1\46\31\0\1\220\1\0"+
    "\30\46\1\265\2\46\12\0\1\46\17\0\1\220\13\0"+
    "\16\46\1\265\14\46\12\0\1\46\25\0\1\217\5\0"+
    "\24\46\1\264\6\46\12\0\1\46\15\0\1\246\15\0"+
    "\14\46\1\313\16\46\12\0\1\46\5\0\1\216\25\0"+
    "\4\46\1\263\26\46\12\0\1\46\12\0\1\247\20\0"+
    "\11\46\1\314\21\46\12\0\1\46\7\0\1\250\23\0"+
    "\6\46\1\315\24\46\12\0\1\46\15\0\1\251\5\0"+
    "\1\252\1\0\1\102\5\0\14\46\1\316\5\46\1\317"+
    "\1\46\1\152\6\46\12\0\1\46\16\0\1\220\14\0"+
    "\15\46\1\265\15\46\12\0\1\46\3\0\1\253\27\0"+
    "\2\46\1\320\30\46\12\0\1\46\31\0\1\254\1\0"+
    "\30\46\1\321\2\46\12\0\1\46\26\0\1\255\4\0"+
    "\25\46\1\322\5\46\12\0\1\46\21\0\1\256\11\0"+
    "\20\46\1\323\12\46\12\0\1\46\12\0\1\257\20\0"+
    "\11\46\1\324\21\46\12\0\1\46\5\0\1\227\25\0"+
    "\4\46\1\274\26\46\12\0\1\46\15\0\1\260\5\0"+
    "\1\261\7\0\14\46\1\325\5\46\1\326\10\46\12\0"+
    "\1\46\6\0\1\262\24\0\5\46\1\327\25\46\2\65"+
    "\2\0\1\65\1\66\4\65\1\330\66\65\2\214\2\0"+
    "\75\214\21\0\1\331\31\0\1\331\52\0\1\332\31\0"+
    "\1\332\51\0\1\333\31\0\1\333\35\0\1\334\31\0"+
    "\1\334\70\0\1\335\31\0\1\335\44\0\1\336\31\0"+
    "\1\336\41\0\1\337\31\0\1\337\31\0\1\340\31\0"+
    "\1\340\46\0\1\341\3\0\1\342\25\0\1\341\3\0"+
    "\1\342\52\0\1\343\31\0\1\343\42\0\1\340\31\0"+
    "\1\340\61\0\1\102\31\0\1\102\51\0\1\344\31\0"+
    "\1\344\46\0\1\255\31\0\1\255\30\0\1\345\31\0"+
    "\1\345\56\0\1\102\31\0\1\102\56\0\1\234\31\0"+
    "\1\234\26\0\1\346\31\0\1\346\46\0\1\347\11\0"+
    "\1\102\17\0\1\347\11\0\1\102\45\0\1\102\31\0"+
    "\1\102\41\0\1\344\31\0\1\344\51\0\1\102\31\0"+
    "\1\102\47\0\1\350\31\0\1\350\36\0\1\351\31\0"+
    "\1\351\46\0\1\352\31\0\1\352\52\0\1\353\31\0"+
    "\1\353\51\0\1\256\31\0\1\256\56\0\1\342\31\0"+
    "\1\342\27\0\1\354\31\0\1\354\46\0\1\102\31\0"+
    "\1\102\62\0\1\355\31\0\1\355\52\0\1\356\31\0"+
    "\1\356\24\0\1\357\31\0\1\357\65\0\1\256\31\0"+
    "\1\256\22\0\1\46\6\0\1\331\24\0\5\46\1\360"+
    "\25\46\12\0\1\46\12\0\1\332\20\0\11\46\1\361"+
    "\21\46\12\0\1\46\15\0\1\333\15\0\14\46\1\362"+
    "\16\46\12\0\1\46\4\0\1\334\26\0\3\46\1\363"+
    "\27\46\12\0\1\46\26\0\1\335\4\0\25\46\1\364"+
    "\5\46\12\0\1\46\24\0\1\336\6\0\23\46\1\365"+
    "\7\46\12\0\1\46\17\0\1\337\13\0\16\46\1\366"+
    "\14\46\12\0\1\46\2\0\1\340\30\0\1\46\1\367"+
    "\31\46\12\0\1\46\2\0\1\341\3\0\1\342\24\0"+
    "\1\46\1\370\3\46\1\371\25\46\12\0\1\46\12\0"+
    "\1\343\20\0\11\46\1\372\21\46\12\0\1\46\6\0"+
    "\1\340\24\0\5\46\1\367\25\46\12\0\1\46\21\0"+
    "\1\102\11\0\20\46\1\152\12\46\12\0\1\46\24\0"+
    "\1\344\6\0\23\46\1\373\7\46\12\0\1\46\24\0"+
    "\1\255\6\0\23\46\1\322\7\46\12\0\1\46\6\0"+
    "\1\345\24\0\5\46\1\374\25\46\12\0\1\46\16\0"+
    "\1\102\14\0\15\46\1\152\15\46\12\0\1\46\26\0"+
    "\1\234\4\0\25\46\1\301\5\46\12\0\1\46\6\0"+
    "\1\346\24\0\5\46\1\375\25\46\12\0\1\46\6\0"+
    "\1\347\11\0\1\102\12\0\5\46\1\376\11\46\1\152"+
    "\13\46\12\0\1\46\17\0\1\102\13\0\16\46\1\152"+
    "\14\46\12\0\1\46\12\0\1\344\20\0\11\46\1\373"+
    "\21\46\12\0\1\46\15\0\1\102\15\0\14\46\1\152"+
    "\16\46\12\0\1\46\16\0\1\350\14\0\15\46\1\377"+
    "\15\46\12\0\1\46\6\0\1\351\24\0\5\46\1\u0100"+
    "\25\46\12\0\1\46\6\0\1\352\24\0\5\46\1\u0101"+
    "\25\46\12\0\1\46\12\0\1\353\20\0\11\46\1\u0102"+
    "\21\46\12\0\1\46\15\0\1\256\15\0\14\46\1\323"+
    "\16\46\12\0\1\46\25\0\1\342\5\0\24\46\1\371"+
    "\6\46\12\0\1\46\6\0\1\354\24\0\5\46\1\u0103"+
    "\25\46\12\0\1\46\6\0\1\102\24\0\5\46\1\152"+
    "\25\46\12\0\1\46\22\0\1\355\10\0\21\46\1\u0104"+
    "\11\46\12\0\1\46\26\0\1\356\4\0\25\46\1\u0105"+
    "\5\46\12\0\1\46\4\0\1\357\26\0\3\46\1\u0106"+
    "\27\46\12\0\1\46\23\0\1\256\7\0\22\46\1\323"+
    "\10\46\2\65\2\0\1\65\1\66\4\65\1\u0107\66\65"+
    "\36\0\1\102\31\0\1\102\42\0\1\254\31\0\1\254"+
    "\35\0\1\u0108\31\0\1\u0108\42\0\1\u0109\31\0\1\u0109"+
    "\62\0\1\244\31\0\1\244\55\0\1\u010a\31\0\1\u010a"+
    "\46\0\1\220\31\0\1\220\46\0\1\256\31\0\1\256"+
    "\24\0\1\u010b\31\0\1\u010b\61\0\1\353\31\0\1\353"+
    "\55\0\1\102\31\0\1\102\33\0\1\u010c\31\0\1\u010c"+
    "\57\0\1\344\31\0\1\344\33\0\1\u010d\31\0\1\u010d"+
    "\40\0\1\u010e\31\0\1\u010e\67\0\1\u010f\31\0\1\u010f"+
    "\27\0\1\344\31\0\1\344\44\0\1\u0110\31\0\1\u0110"+
    "\72\0\1\256\31\0\1\256\26\0\1\u0111\31\0\1\u0111"+
    "\51\0\1\u0112\31\0\1\u0112\34\0\1\46\23\0\1\102"+
    "\7\0\22\46\1\152\10\46\12\0\1\46\17\0\1\254"+
    "\13\0\16\46\1\321\14\46\12\0\1\46\6\0\1\u0108"+
    "\24\0\5\46\1\u0113\25\46\12\0\1\46\2\0\1\u0109"+
    "\30\0\1\46\1\u0114\31\46\12\0\1\46\16\0\1\244"+
    "\14\0\15\46\1\311\15\46\12\0\1\46\25\0\1\u010a"+
    "\5\0\24\46\1\u0115\6\46\12\0\1\46\25\0\1\220"+
    "\5\0\24\46\1\265\6\46\12\0\1\46\25\0\1\256"+
    "\5\0\24\46\1\323\6\46\12\0\1\46\3\0\1\u010b"+
    "\27\0\2\46\1\u0116\30\46\12\0\1\46\16\0\1\353"+
    "\14\0\15\46\1\u0102\15\46\12\0\1\46\25\0\1\102"+
    "\5\0\24\46\1\152\6\46\12\0\1\46\12\0\1\u010c"+
    "\20\0\11\46\1\u0117\21\46\12\0\1\46\23\0\1\344"+
    "\7\0\22\46\1\373\10\46\12\0\1\46\10\0\1\u010d"+
    "\22\0\7\46\1\u0118\23\46\12\0\1\46\2\0\1\u010e"+
    "\30\0\1\46\1\u0119\31\46\12\0\1\46\23\0\1\u010f"+
    "\7\0\22\46\1\u011a\10\46\12\0\1\46\4\0\1\344"+
    "\26\0\3\46\1\373\27\46\12\0\1\46\2\0\1\u0110"+
    "\30\0\1\46\1\u011b\31\46\12\0\1\46\26\0\1\256"+
    "\4\0\25\46\1\323\5\46\12\0\1\46\6\0\1\u0111"+
    "\24\0\5\46\1\u011c\25\46\12\0\1\46\11\0\1\u0112"+
    "\21\0\10\46\1\u011d\22\46\2\65\2\0\1\65\1\66"+
    "\2\65\1\u011e\70\65\15\0\1\u011f\31\0\1\u011f\51\0"+
    "\1\256\31\0\1\256\64\0\1\u0120\31\0\1\u0120\25\0"+
    "\1\u0121\31\0\1\u0121\54\0\1\244\31\0\1\244\44\0"+
    "\1\u0122\31\0\1\u0122\63\0\1\120\31\0\1\120\31\0"+
    "\1\u0123\31\0\1\u0123\55\0\1\342\31\0\1\342\55\0"+
    "\1\102\31\0\1\102\24\0\1\u0122\31\0\1\u0122\43\0"+
    "\1\46\2\0\1\u011f\30\0\1\46\1\u0124\31\46\12\0"+
    "\1\46\5\0\1\256\25\0\4\46\1\323\26\46\12\0"+
    "\1\46\23\0\1\u0120\7\0\22\46\1\u0125\10\46\12\0"+
    "\1\46\2\0\1\u0121\30\0\1\46\1\u0126\31\46\12\0"+
    "\1\46\10\0\1\244\22\0\7\46\1\311\23\46\12\0"+
    "\1\46\6\0\1\u0122\24\0\5\46\1\u0127\25\46\12\0"+
    "\1\46\23\0\1\120\7\0\22\46\1\170\10\46\12\0"+
    "\1\46\6\0\1\u0123\24\0\5\46\1\u0128\25\46\12\0"+
    "\1\46\15\0\1\342\15\0\14\46\1\371\16\46\12\0"+
    "\1\46\24\0\1\102\6\0\23\46\1\152\7\46\12\0"+
    "\1\46\2\0\1\u0122\30\0\1\46\1\u0127\31\46\2\65"+
    "\2\0\1\65\1\66\4\65\1\u0129\66\65\32\0\1\342"+
    "\31\0\1\342\31\0\1\u012a\31\0\1\u012a\70\0\1\256"+
    "\31\0\1\256\45\0\1\342\31\0\1\342\42\0\1\u012b"+
    "\31\0\1\u012b\26\0\1\46\17\0\1\342\13\0\16\46"+
    "\1\371\14\46\12\0\1\46\2\0\1\u012a\30\0\1\46"+
    "\1\u012c\31\46\12\0\1\46\24\0\1\256\6\0\23\46"+
    "\1\323\7\46\12\0\1\46\23\0\1\342\7\0\22\46"+
    "\1\371\10\46\12\0\1\46\17\0\1\u012b\13\0\16\46"+
    "\1\u012d\14\46\2\65\2\0\1\65\1\66\4\65\1\u012e"+
    "\66\65\25\0\1\u012f\31\0\1\u012f\40\0\1\356\31\0"+
    "\1\356\41\0\1\46\12\0\1\u012f\20\0\11\46\1\u0130"+
    "\21\46\12\0\1\46\4\0\1\356\26\0\3\46\1\u0105"+
    "\27\46\2\65\2\0\1\65\1\66\2\65\1\u0131\70\65"+
    "\32\0\1\344\31\0\1\344\26\0\1\46\17\0\1\344"+
    "\13\0\16\46\1\373\14\46\2\65\2\0\1\65\1\66"+
    "\4\65\1\u0132\70\65\2\0\1\65\1\66\4\65\1\u0133"+
    "\70\65\2\0\1\65\1\u0134\73\65";

  private static int [] zzUnpacktrans() {
    int [] result = new int[18785];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\56\1\1\0\1\1\3\0"+
    "\1\11\3\0\1\1\3\0\1\11\23\0\1\1\14\0"+
    "\50\1\1\0\2\1\1\0\2\11\42\0\45\1\12\0"+
    "\1\11\11\0\1\11\3\0\27\1\14\0\13\1\6\0"+
    "\5\1\3\0\2\1\2\0\1\1\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public PintorPalabra pintor = new PintorPalabra();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
      yyline = 0;
    yycolumn = 0;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {     return new Token(TokenConstant.EOF, -1, -1, null);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
          // fall through
          case 17: break;
          case 2:
            { 
            }
          // fall through
          case 18: break;
          case 3:
            { return new Token(TokenConstant.SIGNO, yyline, yycolumn, yytext());
            }
          // fall through
          case 19: break;
          case 4:
            { return new Token(TokenConstant.ARITMETICO, yyline, yycolumn, yytext());
            }
          // fall through
          case 20: break;
          case 5:
            { pintor.pintarAzul((int)yychar, yylength()); return new Token(TokenConstant.ENTERO, yyline, yycolumn, yytext());
            }
          // fall through
          case 21: break;
          case 6:
            { return new Token(TokenConstant.RELACIONAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 22: break;
          case 7:
            { pintor.pintarFucsia((int)yychar, yylength()); return new Token(TokenConstant.ID, yyline, yycolumn, yytext());
            }
          // fall through
          case 23: break;
          case 8:
            { pintor.pintarVerde((int)yychar, yylength()); return new Token(TokenConstant.CADENA, yyline, yycolumn, yytext());
            }
          // fall through
          case 24: break;
          case 9:
            { pintor.pintarNaranja((int)yychar, yylength()); return new Token(TokenConstant.CREATE, yyline, yycolumn, yytext());
            }
          // fall through
          case 25: break;
          case 10:
            { pintor.pintarNaranja((int)yychar, yylength()); return new Token(TokenConstant.LOGICO, yyline, yycolumn, yytext());
            }
          // fall through
          case 26: break;
          case 11:
            { pintor.pintarGris((int)yychar, yylength()); return new Token(TokenConstant.COMENTARIO, yyline, yycolumn, yytext());
            }
          // fall through
          case 27: break;
          case 12:
            { pintor.pintarAzul((int)yychar, yylength()); return new Token(TokenConstant.DECIMAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 28: break;
          case 13:
            { pintor.pintarAzul((int)yychar, yylength()); return new Token(TokenConstant.FUNCION_AGREGACION, yyline, yycolumn, yytext());
            }
          // fall through
          case 29: break;
          case 14:
            { pintor.pintarMorado((int)yychar, yylength()); return new Token(TokenConstant.TIPO_DATO, yyline, yycolumn, yytext());
            }
          // fall through
          case 30: break;
          case 15:
            { pintor.pintarAzul((int)yychar, yylength()); return new Token(TokenConstant.BOOLEAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 31: break;
          case 16:
            { pintor.pintarAmarillo((int)yychar, yylength()); return new Token(TokenConstant.FECHA, yyline, yycolumn, yytext());
            }
          // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
